<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Developers - RadixTalk</title>
    <link>https://radixtalk.com/c/developers/24</link>
    <description>Topics in the &#39;Developers&#39; category Technical topics for Developers</description>
    <language>en-GB</language>
      <lastBuildDate>Wed, 13 Apr 2022 19:32:05 +0000</lastBuildDate>
      <atom:link href="https://radixtalk.com/c/developers/24.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Error message when requesting from API</title>
          <dc:creator><![CDATA[newworld]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>Hey - if I want to get data form the following Radix API (in this case the account balances) I get the following error message:</p>
<p>{“code”:400,“message”:“One or more validation errors occurred”,“details”:{“validation_errors”:[{“path”:"",“errors”:[“A non-empty request body is required.”]}],“type”:“InvalidRequestError”},“trace_id”:“00-994592adc1ef158cee927af48dea2cd0-73e5700a464dfe5f-00”}</p>
<p><strong>this is the request:</strong></p>
<p>import requests</p>
<p>headers={‘Content-Type’:‘application/json’}</p>
<p>query = {“network_identifier”: {“network”: “mainnet”}, “account_identifier”: {“address”: “&lt;MY_ADDRESS&gt;”}}</p>
<p>r = requests.post(’&lt;NOT_ALLOWED_TO_POST_LINK&gt;’, params=query, headers=headers)</p>
<p>print(r.text)</p>
<p>I’m very new to this topic - maybe someone can help me.<br>
BRGDS</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://radixtalk.com/t/error-message-when-requesting-from-api/451">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/error-message-when-requesting-from-api/451</link>
          <pubDate>Wed, 13 Apr 2022 19:32:05 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-451</guid>
          <source url="https://radixtalk.com/t/error-message-when-requesting-from-api/451.rss">Error message when requesting from API</source>
        </item>
        <item>
          <title>Stake / Unstake via API</title>
          <dc:creator><![CDATA[Shawn]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>Has anyone here used the APIs for staking / unstaking found here?</p><aside class="onebox allowlistedgeneric" data-onebox-src="https://documenter.getpostman.com/view/14449947/UVXnHaJh#32508ddc-bdd0-48d4-9e7a-6a0ff2bd118e">
  <header class="source">
      <img src="https://cdn.radixtalk.com/uploads/default/original/1X/23e08811972f34d8a58f14b7bb1968b2034d7de6.png" class="site-icon" width="16" height="16">

      <a href="https://documenter.getpostman.com/view/14449947/UVXnHaJh#32508ddc-bdd0-48d4-9e7a-6a0ff2bd118e" target="_blank" rel="noopener nofollow ugc">Core API</a>
  </header>

  <article class="onebox-body">
    <img src="https://cdn.radixtalk.com/uploads/default/original/1X/430c22d4f9808f11a28f78210e77d617f0a99094.png" class="thumbnail onebox-avatar" width="112" height="112">

<h3><a href="https://documenter.getpostman.com/view/14449947/UVXnHaJh#32508ddc-bdd0-48d4-9e7a-6a0ff2bd118e" target="_blank" rel="noopener nofollow ugc">Core API</a></h3>

  <p>| Core API Revision (OpenAPI Doc Version) | v1.0.0 |
| --- | --- |
| Radix Release | v1.1.0 |

This API provides endpoints from a node for integration with the Radix ledger.

# Overview

&gt; WARNING
&gt; 
&gt; The Core API is **NOT** intended to be...</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>*<strong>Staking</strong> may be started by transferring XRD from an account to a <code>prepared_stake</code> entity with a specific validator. Once XRD is in this entity, at some point the system will move this XRD to a Validator entity and mint StakeUnits into the originating account.</p>
<p>*<strong>Unstaking</strong> may be started by transfering StakeUnits from an account to a <code>prepared_unstake</code> entity. Once StakeUnits is in this entity, at some point the system will destroy this StakeUnits and transfer XRD from the Validator entity into your <code>exiting_stake</code> entity. Once the unlocking period is over the system will move that XRD from the <code>exiting_stake</code> entity into your account.</p>
<p>I’m trying to figure out how to construct the call, but hitting a roadblock.<br>
Thanks!</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://radixtalk.com/t/stake-unstake-via-api/445">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/stake-unstake-via-api/445</link>
          <pubDate>Wed, 13 Apr 2022 15:28:50 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-445</guid>
          <source url="https://radixtalk.com/t/stake-unstake-via-api/445.rss">Stake / Unstake via API</source>
        </item>
        <item>
          <title>Why can`t transfer all balance of an address? it must keep some balance</title>
          <dc:creator><![CDATA[abel]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>why can`t transfer all balance of an address? it must keep some balance</p>
<p>what`s the min balance of the address?</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://radixtalk.com/t/why-can-t-transfer-all-balance-of-an-address-it-must-keep-some-balance/440">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/why-can-t-transfer-all-balance-of-an-address-it-must-keep-some-balance/440</link>
          <pubDate>Mon, 11 Apr 2022 08:06:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-440</guid>
          <source url="https://radixtalk.com/t/why-can-t-transfer-all-balance-of-an-address-it-must-keep-some-balance/440.rss">Why can`t transfer all balance of an address? it must keep some balance</source>
        </item>
        <item>
          <title>How do confirm the transaction had a final in radix?</title>
          <dc:creator><![CDATA[abel]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>we can query receipt of transaction in eth,<br>
how to do that in radix chain ,any core API can support?</p>
            <p><small>5 posts - 2 participants</small></p>
            <p><a href="https://radixtalk.com/t/how-do-confirm-the-transaction-had-a-final-in-radix/433">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-do-confirm-the-transaction-had-a-final-in-radix/433</link>
          <pubDate>Thu, 07 Apr 2022 06:47:16 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-433</guid>
          <source url="https://radixtalk.com/t/how-do-confirm-the-transaction-had-a-final-in-radix/433.rss">How do confirm the transaction had a final in radix?</source>
        </item>
        <item>
          <title>Send multiple consecutive transactions in a short time,how do ensure the unique transaction?</title>
          <dc:creator><![CDATA[abel]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>have any nonce to do that?</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://radixtalk.com/t/send-multiple-consecutive-transactions-in-a-short-time-how-do-ensure-the-unique-transaction/431">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/send-multiple-consecutive-transactions-in-a-short-time-how-do-ensure-the-unique-transaction/431</link>
          <pubDate>Thu, 07 Apr 2022 06:45:16 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-431</guid>
          <source url="https://radixtalk.com/t/send-multiple-consecutive-transactions-in-a-short-time-how-do-ensure-the-unique-transaction/431.rss">Send multiple consecutive transactions in a short time,how do ensure the unique transaction?</source>
        </item>
        <item>
          <title>How to estimate fee of a transaction?</title>
          <dc:creator><![CDATA[abel]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>how to estimate fee of a  transaction?</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://radixtalk.com/t/how-to-estimate-fee-of-a-transaction/429">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-to-estimate-fee-of-a-transaction/429</link>
          <pubDate>Wed, 06 Apr 2022 10:27:37 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-429</guid>
          <source url="https://radixtalk.com/t/how-to-estimate-fee-of-a-transaction/429.rss">How to estimate fee of a transaction?</source>
        </item>
        <item>
          <title>How to query all transactions?</title>
          <dc:creator><![CDATA[abel]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>how to query all transactions?</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://radixtalk.com/t/how-to-query-all-transactions/428">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-to-query-all-transactions/428</link>
          <pubDate>Wed, 06 Apr 2022 01:43:22 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-428</guid>
          <source url="https://radixtalk.com/t/how-to-query-all-transactions/428.rss">How to query all transactions?</source>
        </item>
        <item>
          <title>Pokemon on radix</title>
          <dc:creator><![CDATA[Sebah]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>Hi, is anyone interested in building a pokemon like game in radix? I have some radmons already designed that i can show. The idea would be to create the game and use nft’s as ownership proof to be used ingame.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://radixtalk.com/t/pokemon-on-radix/385">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/pokemon-on-radix/385</link>
          <pubDate>Thu, 17 Feb 2022 19:51:02 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-385</guid>
          <source url="https://radixtalk.com/t/pokemon-on-radix/385.rss">Pokemon on radix</source>
        </item>
        <item>
          <title>Radixir - Elixir Radix Library</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <aside class="onebox allowlistedgeneric" data-onebox-src="https://github.com/radixir/radixir">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">

      <a href="https://github.com/radixir/radixir" target="_blank" rel="noopener">GitHub</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://cdn.radixtalk.com/uploads/default/optimized/1X/47ece4af674f94192cfc9cbbb6ad3bcde64f2f5d_2_690x345.png" class="thumbnail" width="690" height="345" srcset="https://cdn.radixtalk.com/uploads/default/optimized/1X/47ece4af674f94192cfc9cbbb6ad3bcde64f2f5d_2_690x345.png, https://cdn.radixtalk.com/uploads/default/optimized/1X/47ece4af674f94192cfc9cbbb6ad3bcde64f2f5d_2_1035x517.png 1.5x, https://cdn.radixtalk.com/uploads/default/original/1X/47ece4af674f94192cfc9cbbb6ad3bcde64f2f5d.png 2x" data-small-upload="https://cdn.radixtalk.com/uploads/default/optimized/1X/47ece4af674f94192cfc9cbbb6ad3bcde64f2f5d_2_10x10.png"></div>

<h3><a href="https://github.com/radixir/radixir" target="_blank" rel="noopener">GitHub - radixir/radixir: An Elixir wrapper for Radix APIs and functionality.</a></h3>

  <p>An Elixir wrapper for Radix APIs and functionality. - GitHub - radixir/radixir: An Elixir wrapper for Radix APIs and functionality.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Developer: jonericcook#4697 on Discord</p>
            <p><small>5 posts - 2 participants</small></p>
            <p><a href="https://radixtalk.com/t/radixir-elixir-radix-library/334">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/radixir-elixir-radix-library/334</link>
          <pubDate>Sat, 05 Feb 2022 10:36:19 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-334</guid>
          <source url="https://radixtalk.com/t/radixir-elixir-radix-library/334.rss">Radixir - Elixir Radix Library</source>
        </item>
        <item>
          <title>RadixLib - Radix Python Library</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <aside class="onebox allowlistedgeneric" data-onebox-src="https://github.com/0xOmarA/RadixLib">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">

      <a href="https://github.com/0xOmarA/RadixLib" target="_blank" rel="noopener">GitHub</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://cdn.radixtalk.com/uploads/default/optimized/1X/b15130c00670c2fbe870dcbe521f7fd86dd0edb8_2_690x345.png" class="thumbnail" width="690" height="345" srcset="https://cdn.radixtalk.com/uploads/default/optimized/1X/b15130c00670c2fbe870dcbe521f7fd86dd0edb8_2_690x345.png, https://cdn.radixtalk.com/uploads/default/optimized/1X/b15130c00670c2fbe870dcbe521f7fd86dd0edb8_2_1035x517.png 1.5x, https://cdn.radixtalk.com/uploads/default/original/1X/b15130c00670c2fbe870dcbe521f7fd86dd0edb8.png 2x" data-small-upload="https://cdn.radixtalk.com/uploads/default/optimized/1X/b15130c00670c2fbe870dcbe521f7fd86dd0edb8_2_10x10.png"></div>

<h3><a href="https://github.com/0xOmarA/RadixLib" target="_blank" rel="noopener">GitHub - 0xOmarA/RadixLib: A Python package written to make the interaction...</a></h3>

  <p>A Python package written to make the interaction with the Radix blockchain easier. - GitHub - 0xOmarA/RadixLib: A Python package written to make the interaction with the Radix blockchain easier.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Developer: 0xOmar#4183 on Discord</p>
            <p><small>6 posts - 5 participants</small></p>
            <p><a href="https://radixtalk.com/t/radixlib-radix-python-library/333">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/radixlib-radix-python-library/333</link>
          <pubDate>Sat, 05 Feb 2022 10:33:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-333</guid>
          <source url="https://radixtalk.com/t/radixlib-radix-python-library/333.rss">RadixLib - Radix Python Library</source>
        </item>
        <item>
          <title>How to setup your own Radix Gateway API server</title>
          <dc:creator><![CDATA[Oleh Koval]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <h1>
<a name="radix-gateway-api-setup-1" class="anchor" href="https://radixtalk.com#radix-gateway-api-setup-1"></a>Radix Gateway API setup</h1>
<p>The setup includes: Radix Full Node + Data Aggregator + Gateway API + Postres DB used by Aggregator + Read-only Replica used by the Gateway API itself, all running on the same dedicated server.<br>
The result of this setup is Gateway API running on <code>http://&lt;server_ip&gt;:5308</code>, Core/System API - on <code>https://&lt;server_ip&gt;:443</code> (requires authentication with admin/superadmin passwords).</p>
<p>Details in this gist:</p><aside class="onebox githubgist" data-onebox-src="https://gist.github.com/Mleekko/8168601a61ff4f9cc932a5425c5ccd37">
  <header class="source">

      <a href="https://gist.github.com/Mleekko/8168601a61ff4f9cc932a5425c5ccd37" target="_blank" rel="noopener nofollow ugc">gist.github.com</a>
  </header>

  <article class="onebox-body">
    <h4><a href="https://gist.github.com/Mleekko/8168601a61ff4f9cc932a5425c5ccd37" target="_blank" rel="noopener nofollow ugc">https://gist.github.com/Mleekko/8168601a61ff4f9cc932a5425c5ccd37</a></h4>

  <h5>$README.md</h5>
  <pre><code class="Markdown"># Radix Gateway API setup

## Introduction
The setup includes: Radix Full Node + Data Aggregator + Gateway API + Postres DB used by Aggregator + Read-only Replica used by the Gateway API itself, all running on the same dedicated server.
I used `Intel Xeon W-2145, 8/16x 3.70GHz, 128Gb RAM, 4x 480 GB SSD` but half of RAM/CPU should be more than enough for a single consumer (to separate Porsgres from Node DB we still need at least 3 SSDs for the scenario with replica or 2 SSDs without it).

The result of this setup is Gateway API running on `http://&lt;server_ip&gt;:5308`, Core/System API - on `https://&lt;server_ip&gt;:443` (requires authentication with admin/superadmin passwords).

Closing all internal ports - TBD.
</code></pre>
    This file has been truncated. <a href="https://gist.github.com/Mleekko/8168601a61ff4f9cc932a5425c5ccd37" target="_blank" rel="noopener nofollow ugc">show original</a>
  <h5>.env</h5>
  <pre><code class="Shell"># Used by Docker Compose: https://docs.docker.com/compose/env-file/


##############################################################################
# FULL NODE CONFIGURATION                                                    #
##############################################################################

# This is the node to bootstrap the node address book from
# For some mainnet choices, see https://docs.radixdlt.com/main/node/docker-install-node.html#create-environment-variables-for-docker-install
# An example foundation stokenet node is: radix://tn1qw42uqkauehsmwk6msxve5zr9lapjd8r3np4z84nna8jlp03mfzwqd2tl8m@3.108.248.49</code></pre>
    This file has been truncated. <a href="https://gist.github.com/Mleekko/8168601a61ff4f9cc932a5425c5ccd37" target="_blank" rel="noopener nofollow ugc">show original</a>
  <h5>data-aggregator-fixed-configuration.json</h5>
  <pre><code class="JSON">{
    "Logging": {
        "Console": {
            "FormatterName": "simple",
            "FormatterOptions": {
                "IncludeScopes": true,
                "ColorBehavior": "Enabled",
                "TimestampFormat": "yyyy-MM-ddTHH\\:mm\\:ss.fff\\Z ",
                "UseUtcTimestamp": true
            }</code></pre>
    This file has been truncated. <a href="https://gist.github.com/Mleekko/8168601a61ff4f9cc932a5425c5ccd37" target="_blank" rel="noopener nofollow ugc">show original</a>

<p>
    There are more than three files. <a href="https://gist.github.com/Mleekko/8168601a61ff4f9cc932a5425c5ccd37" target="_blank" rel="noopener nofollow ugc">show original</a>
</p>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://radixtalk.com/t/how-to-setup-your-own-radix-gateway-api-server/323">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-to-setup-your-own-radix-gateway-api-server/323</link>
          <pubDate>Thu, 03 Feb 2022 02:47:55 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-323</guid>
          <source url="https://radixtalk.com/t/how-to-setup-your-own-radix-gateway-api-server/323.rss">How to setup your own Radix Gateway API server</source>
        </item>
        <item>
          <title>Radix Libraries</title>
          <dc:creator><![CDATA[Jon-Eric Cook]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>Is there a place where we can collect all the tools / libraries being worked on for the Radix ecosystem?</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://radixtalk.com/t/radix-libraries/284">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/radix-libraries/284</link>
          <pubDate>Wed, 26 Jan 2022 03:31:21 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-284</guid>
          <source url="https://radixtalk.com/t/radix-libraries/284.rss">Radix Libraries</source>
        </item>
        <item>
          <title>How to get started in Scrypto</title>
          <dc:creator><![CDATA[Clement]]></dc:creator>
          <category>Scrypto</category>
          <description><![CDATA[
            <p>A lot of developers are asking about how to get started in Scrypto. On this post, I am giving guidelines to help you become the Scrypto expert you want to become.</p>
<h2>
<a name="should-i-know-rust-before-starting-1" class="anchor" href="https://radixtalk.com#should-i-know-rust-before-starting-1"></a>Should I know Rust before starting ?</h2>
<p>This is a question we get a lot. Knowing the basics of Rust’s syntax will make it easier for you to understand and write Scrypto code, but you don’t need to be an expert in Rust. We suggest people new to Rust to read <a href="https://fasterthanli.me/articles/a-half-hour-to-learn-rust">A half-hour to learn Rust</a>. This quick tutorial will teach just about anyone with a little programming experience enough of the Rust basics to start building with Scrypto quickly.</p>
<h2>
<a name="from-zero-to-expert-2" class="anchor" href="https://radixtalk.com#from-zero-to-expert-2"></a>From zero to expert</h2>
<ol>
<li>Read the <a href="https://docs.radixdlt.com/main/scrypto/introduction.html">Scrypto documentation</a> and try the concepts you learn in the <a href="https://play.scrypto-lang.org/">Scrypto Playground</a>
</li>
<li>Install Rust and the Scrypto simulator by following <a href="https://docs.radixdlt.com/main/scrypto/getting-started/install-scrypto.html">these instructions</a>
</li>
<li>Look at Scrypto examples in the <a href="https://github.com/radixdlt/community-scrypto-examples">community-scrypto</a> GitHub repository</li>
<li>Make your own example and create a pull request to that same repository. This will allow you to get feedback from RDX Works</li>
<li>Participate in the discussions on the Scrypto <a href="https://discord.gg/tfw6vhY32n">Discord</a> and <a href="https://radixtalk.com">Telegram</a> channels</li>
</ol>
<p>After that, it’s only a matter of coding, coding, and more coding. After writing a couple of examples, you will become good enough in Scrypto to make your own project and help people in the community !</p>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://radixtalk.com/t/how-to-get-started-in-scrypto/283">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-to-get-started-in-scrypto/283</link>
          <pubDate>Tue, 25 Jan 2022 20:47:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-283</guid>
          <source url="https://radixtalk.com/t/how-to-get-started-in-scrypto/283.rss">How to get started in Scrypto</source>
        </item>
        <item>
          <title>What is the maximum length of messages in a transaction?</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>The maximum number of characters you can send in a transaction depends on the method used and whether the message is plaintext or encrypted:</p>
<div class="md-table">
<table>
<thead>
<tr>
<th>Method</th>
<th>Type</th>
<th>Max Length</th>
</tr>
</thead>
<tbody>
<tr>
<td>Radix Wallet (v1.2)</td>
<td>Plaintext</td>
<td>125</td>
</tr>
<tr>
<td>Radix Wallet (v1.2)</td>
<td>Encrypted</td>
<td>64</td>
</tr>
<tr>
<td>Json-Rpc API</td>
<td>Plaintext</td>
<td>125</td>
</tr>
<tr>
<td>Json-Rpc API</td>
<td>Encrypted</td>
<td>64</td>
</tr>
<tr>
<td>Radix Wallet (v1.3)</td>
<td>Plaintext</td>
<td>253</td>
</tr>
<tr>
<td>Radix Wallet (v1.3)</td>
<td>Encrypted</td>
<td>192</td>
</tr>
<tr>
<td>Core API</td>
<td>Plaintext</td>
<td>252*</td>
</tr>
<tr>
<td>Core API</td>
<td>Encrypted</td>
<td>192</td>
</tr>
</tbody>
</table>
</div><h2>
<a name="explanation-1" class="anchor" href="https://radixtalk.com#explanation-1"></a>Explanation</h2>
<p>Messages that are readable by the Radix Wallet and Explorer are first encoded using a simple scheme as follows:</p>
<h3>
<a name="plaintext-message-2" class="anchor" href="https://radixtalk.com#plaintext-message-2"></a>Plaintext Message</h3>
<p>Message: <code>Hello</code></p>
<div class="md-table">
<table>
<thead>
<tr>
<th>Key</th>
<th>Bytes</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Message Type</td>
<td>1</td>
<td><code>00</code></td>
</tr>
<tr>
<td>Encryption Scheme</td>
<td>1</td>
<td><code>00</code></td>
</tr>
<tr>
<td>Plaintext</td>
<td>5</td>
<td>48656c6c6f</td>
</tr>
</tbody>
</table>
</div><p>The plaintext encoded message in bytes is therefore:<br>
<code>000048656c6c6f</code></p>
<h3>
<a name="encrypted-message-3" class="anchor" href="https://radixtalk.com#encrypted-message-3"></a>Encrypted Message</h3>
<p>Message: <code>Hello</code></p>
<div class="md-table">
<table>
<thead>
<tr>
<th>Key</th>
<th>Bytes</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Message Type</td>
<td>1</td>
<td><code>01</code></td>
</tr>
<tr>
<td>Encryption Scheme</td>
<td>1</td>
<td><code>ff</code></td>
</tr>
<tr>
<td>Ephemeral Public Key</td>
<td>33</td>
<td><code>03a0baf4510d589fa59c26f7f97d749f796424859b80716dc12a3b20a4e1ac9573</code></td>
</tr>
<tr>
<td>Nonce</td>
<td>12</td>
<td><code>0fd55101a52baab614b2f3e3</code></td>
</tr>
<tr>
<td>Auth Tag</td>
<td>16</td>
<td><code>8a2c1addb7d97abe5ecdcea02de4a670</code></td>
</tr>
<tr>
<td>Cipher Text</td>
<td>5</td>
<td><code>a399e28dee</code></td>
</tr>
</tbody>
</table>
</div><p>The encrypted encoded message in bytes is therefore:<br>
<code>01ff03a0baf4510d589fa59c26f7f97d749f796424859b80716dc12a3b20a4e1ac95730fd55101a52baab614b2f3e38a2c1addb7d97abe5ecdcea02de4a670a399e28dee</code></p>
<h3>
<a name="json-rpc-api-radix-wallet-v12-4" class="anchor" href="https://radixtalk.com#json-rpc-api-radix-wallet-v12-4"></a>Json-Rpc API / Radix Wallet (v1.2)</h3>
<p>Convert the encoded message bytes into a string representation:</p>
<p><code>0x00 0x00 0x48 0x65 0x6c 0x6c 0x6f</code> → <code>"000048656C6C6F"</code></p>
<p>Unfortunately, when this message string is submitted with transaction, the encoded message string is encoded <em>again</em> by converting each character into its hex string equivalent:</p>
<p><code>"000048656C6C6F"</code> → <code>"3030303034383635364336433646"</code> → <code>0x33 0x30 0x33 0x30 0x33 0x30 0x33 0x30 0x33 0x34 0x33 0x38 0x33 0x36 0x33 0x35 0x33 0x36 0x34 0x33 0x33 0x36 0x34 0x33 0x33 0x36 0x34 0x36</code></p>
<p>So the message value that is actually stored in the message field on the ledger for this example grows from 7 bytes to 28 bytes.</p>
<p>The transaction message field has a maximum length of 255 bytes. After the double hex encoding we only have 127 bytes available for the message data (255/2 = 127.5 → 127 bytes):</p>
<ul>
<li>For unencrypted messages we have a 2 byte header which leaves us with 125 bytes for the message content.</li>
<li>For encrypted messages we have a 63 bytes header which leaves us with 64 bytes for the message content.</li>
</ul>
<h3>
<a name="core-api-radix-wallet-v13-5" class="anchor" href="https://radixtalk.com#core-api-radix-wallet-v13-5"></a>Core API / Radix Wallet (v1.3)</h3>
<p>Convert the encoded message bytes into a string representation:</p>
<p><code>0x00 0x00 0x48 0x65 0x6c 0x6c 0x6f</code> → <code>"000048656C6C6F"</code></p>
<p>When the message string is submitted with the transaction, the string encoded message is converted back into bytes:</p>
<p><code>"000048656C6C6F"</code> → <code>0x00 0x00 0x48 0x65 0x6c 0x6c 0x6f</code></p>
<p>The transaction field has a maximum length of 255 bytes:</p>
<ul>
<li>For unencrypted messages we have a 2 byte header which leaves us with 253 bytes for the message content [*Where did the missing byte for Core API call go?]</li>
<li>For encrypted messages we have a 63 byte header which leaves us with 192 bytes for the message content.</li>
</ul>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://radixtalk.com/t/what-is-the-maximum-length-of-messages-in-a-transaction/276">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/what-is-the-maximum-length-of-messages-in-a-transaction/276</link>
          <pubDate>Sat, 22 Jan 2022 10:26:44 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-276</guid>
          <source url="https://radixtalk.com/t/what-is-the-maximum-length-of-messages-in-a-transaction/276.rss">What is the maximum length of messages in a transaction?</source>
        </item>
        <item>
          <title>How to parse the &quot;blob&quot; content returned from archive node?</title>
          <dc:creator><![CDATA[minhnn | EasyStake.net]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>Below is the answer by Stuart in discord:</p>
<p>The specs for parsing transactions are here:</p>
<p><a href="https://github.com/radixdlt/radixdlt/blob/develop/docs/transaction-specs/specs/parsing.md" class="inline-onebox" rel="noopener nofollow ugc">radixdlt/parsing.md at develop · radixdlt/radixdlt · GitHub</a>.</p>
<p>I implemented the spec to create my own parser but there is a Rust example here:</p><aside class="onebox githubfolder" data-onebox-src="https://github.com/radixdlt/radixdlt/tree/develop/docs/transaction-specs/test/parser">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">

      <a href="https://github.com/radixdlt/radixdlt/tree/develop/docs/transaction-specs/test/parser" target="_blank" rel="noopener nofollow ugc">github.com</a>
  </header>

  <article class="onebox-body">
    <h3><a href="https://github.com/radixdlt/radixdlt/tree/develop/docs/transaction-specs/test/parser" target="_blank" rel="noopener nofollow ugc">radixdlt/docs/transaction-specs/test/parser at develop · radixdlt/radixdlt</a></h3>

  <p><a href="https://github.com/radixdlt/radixdlt/tree/develop/docs/transaction-specs/test/parser" target="_blank" rel="noopener nofollow ugc">develop/docs/transaction-specs/test/parser</a></p>

  <p><span class="label1">Radix monorepo. Contribute to radixdlt/radixdlt development by creating an account on GitHub.</span></p>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

            <p><small>5 posts - 2 participants</small></p>
            <p><a href="https://radixtalk.com/t/how-to-parse-the-blob-content-returned-from-archive-node/269">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-to-parse-the-blob-content-returned-from-archive-node/269</link>
          <pubDate>Fri, 21 Jan 2022 01:54:44 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-269</guid>
          <source url="https://radixtalk.com/t/how-to-parse-the-blob-content-returned-from-archive-node/269.rss">How to parse the &quot;blob&quot; content returned from archive node?</source>
        </item>
        <item>
          <title>What is the maximum size of a Radix transaction?</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>The maximum user transaction size is <a href="https://github.com/radixdlt/radixdlt/blob/develop/docs/transaction-specs/specs/validation.md">1024 * 1024 bytes</a></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://radixtalk.com/t/what-is-the-maximum-size-of-a-radix-transaction/241">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/what-is-the-maximum-size-of-a-radix-transaction/241</link>
          <pubDate>Fri, 14 Jan 2022 17:58:17 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-241</guid>
          <source url="https://radixtalk.com/t/what-is-the-maximum-size-of-a-radix-transaction/241.rss">What is the maximum size of a Radix transaction?</source>
        </item>
        <item>
          <title>What is the accumulator hash?</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>The accumulator hash is a fixed length value that is used to verify that the current transaction, and all transactions before it, have occurred in the correct order and have not been tampered with.</p>
<h3>
<a name="how-is-it-calculated-1" class="anchor" href="https://radixtalk.com#how-is-it-calculated-1"></a>How is it calculated?</h3>
<p>The <strong>accumulator hash</strong> is calculated by hashing the previous accumulator hash with the current transaction id.</p>
<p>At the genesis of the Radix public network, the initial accumulator hash was set to 32 bytes of zeros:  <code>0000000000000000000000000000000000000000000000000000000000000000</code></p>
<p>The genesis transaction had a transaction id of: <code>030E7094728C8D065C5DB696977696BEA9094F67BCFD4C021F99EC784E24023B</code></p>
<p>To calculate the very first accumulator hash we:</p>
<ol>
<li>Concatenate the 32 byte parent accumulator hash (0000…0000) with the 32 byte genesis transaction id (030E…023B) together to create a 64 byte value: <code>0000000000000000000000000000000000000000000000000000000000000000030E7094728C8D065C5DB696977696BEA9094F67BCFD4C021F99EC784E24023B</code>
</li>
<li>We do a double SHA256 hashing operation: <code>sha256(sha256(0000...023B))</code>
</li>
<li>The result is the new accumulator hash: <code>1E62415E5FD95C63AFF69142F1359CC6A981FF7169C128D266F45ADF614D09B0</code>
</li>
</ol>
<p>To calculate the second accumulator hash, we take the result of the previous (parent) accumulator hash, append the transaction id of the second transaction, and perform the double sha256 operation again.</p>
<p>The code snippet below illustrates the calculation of the first 2 accumulator hashes on the mainnet Radix public network:</p>
<pre><code class="lang-python">import hashlib

#  32 bytes of zeros
genesis_accumulator = bytearray.fromhex("0000000000000000000000000000000000000000000000000000000000000000")

# First transaction hash
first_transaction_id = bytearray.fromhex("030E7094728C8D065C5DB696977696BEA9094F67BCFD4C021F99EC784E24023B")

inner = hashlib.sha256()
inner.update(genesis_accumulator + first_transaction_id)

outer = hashlib.sha256()
outer.update(inner.digest())

# First accumulator hash
first_accumulator = outer.digest()
print("First Accumulator hash:", first_accumulator.hex())

# Second transaction hash
second_transaction_id = bytearray.fromhex("9E4DA050269BB7114AAF2AF7339719C7CD030B19EC32F12AD85B95D5A76CB714")

inner = hashlib.sha256()
inner.update(first_accumulator + second_transaction_id)

outer = hashlib.sha256()
outer.update(inner.digest())

# Second accumulator hash
second_accumulator = outer.digest()
print("Second Accumulator hash:", second_accumulator.hex())
</code></pre>
<p>The calculation of the accumulator hash is repeated for every transaction that occurs on the ledger. As long as transactions occur in the same order, with the same transaction ids, then every validator node will independently calculate the same accumulator hash values and can be confident that they have not received modified transaction data.</p>
<p>We can confirm that our accumulator calculations are correct by comparing them to the values stored in the ledger:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://cdn.radixtalk.com/uploads/default/original/1X/38d825471842d553f5c62a39901efca74cda3e1e.png" data-download-href="https://cdn.radixtalk.com/uploads/default/38d825471842d553f5c62a39901efca74cda3e1e" title="Screenshot 2022-01-10 at 16.52.59"><img src="https://cdn.radixtalk.com/uploads/default/optimized/1X/38d825471842d553f5c62a39901efca74cda3e1e_2_690x50.png" alt="Screenshot 2022-01-10 at 16.52.59" data-base62-sha1="86RPlziKn0BZuCNpKL37WFoPX1I" width="690" height="50" srcset="https://cdn.radixtalk.com/uploads/default/optimized/1X/38d825471842d553f5c62a39901efca74cda3e1e_2_690x50.png, https://cdn.radixtalk.com/uploads/default/optimized/1X/38d825471842d553f5c62a39901efca74cda3e1e_2_1035x75.png 1.5x, https://cdn.radixtalk.com/uploads/default/optimized/1X/38d825471842d553f5c62a39901efca74cda3e1e_2_1380x100.png 2x" data-small-upload="https://cdn.radixtalk.com/uploads/default/optimized/1X/38d825471842d553f5c62a39901efca74cda3e1e_2_10x10.png"></a></div><p></p>
<p>Another very important factor to note is that id of a transaction <em>is a hash</em> of all the instructions contained within the transaction. If any of the instructions have been tampered with inside the transaction, then the transaction id will change.</p>
<p>In this way, the accumulator hash is a very simple, but powerful way of ensuring the integrity of transactions on the ledger.</p>
<h3>
<a name="run-this-on-replit-2" class="anchor" href="https://radixtalk.com#run-this-on-replit-2"></a>Run this on Replit:</h3>
<p><iframe src="https://replit.com/@radixtalk/Accumulator-Hash?lite=true" width="695" height="521" frameborder="0" seamless="seamless" sandbox="allow-same-origin allow-scripts allow-forms allow-popups allow-popups-to-escape-sandbox allow-presentation"></iframe></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://radixtalk.com/t/what-is-the-accumulator-hash/226">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/what-is-the-accumulator-hash/226</link>
          <pubDate>Mon, 10 Jan 2022 14:17:09 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-226</guid>
          <source url="https://radixtalk.com/t/what-is-the-accumulator-hash/226.rss">What is the accumulator hash?</source>
        </item>
        <item>
          <title>How to encrypt a transaction message that can be read by the Radix Wallet</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>TODO: Explain process step by step</p>
<pre><code class="lang-python">import os
import bech32
import ecdsa
import hashlib
from ecdsa.curves import SECP256k1
from ecdsa.keys import SigningKey, VerifyingKey
from Crypto.Protocol.KDF import scrypt
from Crypto.Cipher import AES

# Encrypted Message Parameters
plaintext_message=b"Hey Bob, this is Alice, you and I can read this message, but no one else."
alice_private_key_hex = "0000000000000000000000000000000000000000000000000000000000000001"
bob_wallet_address = "rdx1qspvvprlj3q76ltdxpz5qm54cp7dshrh3e9cemeu5746czdet3cfaegp8alwf"

# Convert receiver's wallet address into a public key
_hrp, bob_readdr_5bit = bech32.bech32_decode(bob_wallet_address)
bob_readdr_bytes = bech32.convertbits(bob_readdr_5bit, 5, 8, pad=False)
bob_public_key_bytes = bytes(bob_readdr_bytes)[1:34]
bob_public_key = VerifyingKey.from_string(bob_public_key_bytes, curve=SECP256k1, hashfunc=hashlib.sha256)

print("Bob Public Key:", bob_public_key.to_string("compressed").hex())


alice_private_key = SigningKey.from_string(bytearray.fromhex(alice_private_key_hex), curve=SECP256k1, hashfunc=hashlib.sha256)

# Diffie-Hellman - we need to use lower level functions here so that we get back dh as a curve point
dh = bob_public_key.pubkey.point * alice_private_key.privkey.secret_multiplier

# Create Ephemeral Key
ephemeral_private_key = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1, hashfunc=hashlib.sha256)
ephemeral_public_key = ephemeral_private_key.get_verifying_key()

print("Ephemeral Public Key:", ephemeral_public_key.to_string("compressed").hex())

ephemeral_point = ephemeral_public_key.pubkey.point

# Elliptic Curve Point Addition
shared_secret_point = dh + ephemeral_point
shared_secret_integer = shared_secret_point.x()
shared_secret = int.to_bytes(shared_secret_integer, 32, 'big')

print("Shared Secret: ", shared_secret.hex())

# Create nonce
nonce_bytes = os.urandom(12)
print("Nonce: ", nonce_bytes.hex())

# Generate Scrypt salt from nonce
salt = hashlib.sha256(nonce_bytes).digest()
print("Scrypt Salt: ", salt.hex())

# Create the Encryption Key
key = scrypt(shared_secret, salt, 32, 8192, 8 ,1)

print("Encryption Key:", key.hex())

encrypt = AES.new(key, AES.MODE_GCM, nonce=nonce_bytes)

# Add the Ephemeral Public Key as Associated Data
encrypt.update(ephemeral_public_key.to_string("compressed"))

# Perform the Encryption and generate Ciphertext with related Authentication Tag
ciphertext, auth_tag = encrypt.encrypt_and_digest(plaintext_message)

print("Ciphertext:", ciphertext.hex())
print("Auth Tag:", auth_tag.hex())

# Encode the message to submit
msg = bytearray(b'\x01')
msg += bytearray(b'\xff')
msg += bytearray(ephemeral_public_key.to_string("compressed"))
msg += bytearray(nonce_bytes)
msg += bytearray(auth_tag)
msg += bytearray(ciphertext)

print("Encoded Encrypted Message:", msg.hex())
</code></pre>
<h2>
<a name="run-this-on-replit-1" class="anchor" href="https://radixtalk.com#run-this-on-replit-1"></a>Run this on Replit:</h2>
<p><iframe src="https://replit.com/@radixtalk/Encrypt-Transaction-Message?lite=true" width="695" height="521" frameborder="0" seamless="seamless" sandbox="allow-same-origin allow-scripts allow-forms allow-popups allow-popups-to-escape-sandbox allow-presentation"></iframe></p>
<p>Also see: <a href="https://radixtalk.com/t/how-to-decrypt-an-encrypted-transaction-message-created-by-the-radix-wallet/189" class="inline-onebox">How to decrypt an encrypted transaction message created by the Radix Wallet</a></p>
<p>This work by <a href="https://radixpool.com/">RadixPool.com</a> is licensed under a <a href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>.</p>
            <p><small>6 posts - 2 participants</small></p>
            <p><a href="https://radixtalk.com/t/how-to-encrypt-a-transaction-message-that-can-be-read-by-the-radix-wallet/202">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-to-encrypt-a-transaction-message-that-can-be-read-by-the-radix-wallet/202</link>
          <pubDate>Mon, 03 Jan 2022 15:59:34 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-202</guid>
          <source url="https://radixtalk.com/t/how-to-encrypt-a-transaction-message-that-can-be-read-by-the-radix-wallet/202.rss">How to encrypt a transaction message that can be read by the Radix Wallet</source>
        </item>
        <item>
          <title>How to convert a Validator Address (rv...) into a Node Address (rn...)</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>Both the node address and the validator address are Bech32 encodings of the same compressed public key with different human-readable parts (hrp).</p>
<pre><code class="lang-python">import bech32

validator_address = "rv1q22ts4wderfhzham0vnzs93g68d5hal3g8yyvv06re8sn88er9ud7yrqayv"
print("Validator Address:", validator_address)

# Extract Valdidator HRP (rv) and Public Key
_hrp, public_key5 = bech32.bech32_decode(validator_address)

# Re-encode Public Key with Node HRP (rn)
node_address = bech32.bech32_encode("rn", public_key5)
print("Node Adddress:", node_address)

# Returns:
# Validator Adddress: rv1q22ts4wderfhzham0vnzs93g68d5hal3g8yyvv06re8sn88er9ud7yrqayv
# Node Address: rn1q22ts4wderfhzham0vnzs93g68d5hal3g8yyvv06re8sn88er9ud7us2dgj
</code></pre>
<h2>
<a name="run-this-code-on-replit-1" class="anchor" href="https://radixtalk.com#run-this-code-on-replit-1"></a>Run this code on Replit:</h2>
<p><iframe src="https://replit.com/@radixtalk/Radix-Validator-to-Radix-Node?lite=true" width="695" height="521" frameborder="0" seamless="seamless" sandbox="allow-same-origin allow-scripts allow-forms allow-popups allow-popups-to-escape-sandbox allow-presentation"></iframe></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://radixtalk.com/t/how-to-convert-a-validator-address-rv-into-a-node-address-rn/196">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-to-convert-a-validator-address-rv-into-a-node-address-rn/196</link>
          <pubDate>Sun, 02 Jan 2022 15:08:27 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-196</guid>
          <source url="https://radixtalk.com/t/how-to-convert-a-validator-address-rv-into-a-node-address-rn/196.rss">How to convert a Validator Address (rv...) into a Node Address (rn...)</source>
        </item>
        <item>
          <title>How to convert a Public Key into a Wallet Address</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <pre><code class="lang-python">import bech32

# public key in compressed format (33 bytes long and starts with 02 or 03)
public_key_hex="02...."

# Convert Compressed Public Key into a Radix Engine Address
readdr_bytes = b"\x04" + bytearray.fromhex(public_key_hex)

# Convert Radix Engine Address to Bech32 Radix Wallet Address
readdr_bytes5 = bech32.convertbits(readdr_bytes, 8, 5)
wallet_address = bech32.bech32_encode("rdx", readdr_bytes5)
print("Wallet Address: ", wallet_address)
</code></pre>
<h2>
<a name="run-this-code-on-replit-1" class="anchor" href="https://radixtalk.com#run-this-code-on-replit-1"></a>Run this code on Replit:</h2>
<p><iframe src="https://replit.com/@radixtalk/Public-Key-to-Wallet-Address?lite=true" width="695" height="521" frameborder="0" seamless="seamless" sandbox="allow-same-origin allow-scripts allow-forms allow-popups allow-popups-to-escape-sandbox allow-presentation"></iframe></p>
<p>Also see: <a href="https://radixtalk.com/t/how-to-convert-a-wallet-address-into-a-public-key/188" class="inline-onebox">How to convert a Wallet Address into a Public Key</a></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://radixtalk.com/t/how-to-convert-a-public-key-into-a-wallet-address/193">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-to-convert-a-public-key-into-a-wallet-address/193</link>
          <pubDate>Sat, 01 Jan 2022 22:25:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-193</guid>
          <source url="https://radixtalk.com/t/how-to-convert-a-public-key-into-a-wallet-address/193.rss">How to convert a Public Key into a Wallet Address</source>
        </item>
        <item>
          <title>How to decrypt an encrypted transaction message created by the Radix Wallet</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <h1>
<a name="how-to-decrypt-an-encrypted-transaction-message-created-by-the-radix-wallet-1" class="anchor" href="https://radixtalk.com#how-to-decrypt-an-encrypted-transaction-message-created-by-the-radix-wallet-1"></a>How to decrypt an encrypted transaction message created by the Radix Wallet</h1>
<h2>
<a name="h-0-introduction-2" class="anchor" href="https://radixtalk.com#h-0-introduction-2"></a>0. Introduction</h2>
<p>The encryption scheme used by the Radix Wallet is called <code>DH_ADD_EPH_AESGCM256_SCRYPT_000</code></p>
<p>Where:</p>
<ul>
<li>DH → <a href="https://cryptobook.nakov.com/asymmetric-key-ciphers/ecdh-key-exchange">(Elliptic Curve) Diffie-Hellman</a> (A key exchange protocol that allows untrusted parties to construct a shared secret)</li>
<li>ADD → Elliptic Curve Point Addition (The operation we use to create the shared secret)</li>
<li>EPH → Ephemeral Public Key (A temporary public key that is only used for the purpose of encrypting/decrypting the message)</li>
<li>AESGCM256 → The symmetrical encryption algorithm used to encrypt/decrypt the message (Advanced Encryption Standard, Galios Counter Mode, 256 bits)</li>
<li>SCRYPT → The Key Derivation Function (KDF) used (Scrypt)</li>
<li>000 → The version of the scheme</li>
</ul>
<p>The encryption scheme allows both the sender and receiver to decrypt the message - but no one else.</p>
<p>Alice sends the following encrypted message to Bob:</p>
<p><code>01ff02663a6aaf4d5ec607330b9b74a840bf5c13b0a7357202fa85be56b1326065561657d6ee46d4d84e94ec615b425a472dd8c813bad125335a097d29b64b72319357406b2b04491b4ca1a5a05fe8772b0c05f4633b399914348c5b03af58445d42c2f740f8407e572775a571805e582c6b96ffd4ccca764f2002510abddaab735ee4fb0b18c26d</code></p>
<p>Alice’s Wallet Address: <code>rdx1qsp8n0nx0muaewav2ksx99wwsu9swq5mlndjmn3gm9vl9q2mzmup0xqm2ylge</code></p>
<p>Bob’s Wallet Address: <code>rdx1qspvvprlj3q76ltdxpz5qm54cp7dshrh3e9cemeu5746czdet3cfaegp8alwf</code></p>
<p>For Bob to decrypt the message, he needs:</p>
<ul>
<li>Alice’s Public Key</li>
<li>Bob’s Private Key</li>
</ul>
<h2>
<a name="h-1-convert-alices-wallet-address-into-a-her-public-key-3" class="anchor" href="https://radixtalk.com#h-1-convert-alices-wallet-address-into-a-her-public-key-3"></a>1. Convert Alice’s Wallet address into a her Public Key:</h2>
<pre><code class="lang-python">import bech32

alice_wallet_address = "rdx1qsp8n0nx0muaewav2ksx99wwsu9swq5mlndjmn3gm9vl9q2mzmup0xqm2ylge"

_hrp, alice_readdr_5bit = bech32.bech32_decode(alice_wallet_address)
alice_readdr_bytes = bech32.convertbits(alice_readdr_5bit, 5, 8, pad=False)

## Remove the REAddr 04 prefix byte
alice_public_key_bytes = bytes(alice_readdr_bytes)[1:34]

alice_public_key_hex = bytes(alice_public_key_bytes).hex()
print("Alice Public Key:", alice_public_key_hex)

# Alice Public Key: 0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798
</code></pre>
<h2>
<a name="h-2-use-elliptic-curve-diffie-helmann-to-combine-alices-public-key-with-bobs-private-key-4" class="anchor" href="https://radixtalk.com#h-2-use-elliptic-curve-diffie-helmann-to-combine-alices-public-key-with-bobs-private-key-4"></a>2. Use Elliptic Curve Diffie-Helmann to combine Alice’s Public Key with Bob’s Private Key:</h2>
<pre><code class="lang-python">import hashlib
from ecdsa.curves import SECP256k1
from ecdsa.keys import SigningKey, VerifyingKey

alice_public_key_hex = "0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"
alice_public_key = VerifyingKey.from_string(bytearray.fromhex(alice_public_key_hex), curve=SECP256k1, hashfunc=hashlib.sha256 )

bob_private_key_hex = "0000000000000000000000000000000000000000000000000000000000000002"
bob_private_key = SigningKey.from_string(bytearray.fromhex(bob_private_key_hex), curve=SECP256k1, hashfunc=hashlib.sha256)

# Diffie-Hellman - we need to use lower level functions here so that we get back dh as a curve point
dh = alice_public_key.pubkey.point * bob_private_key.privkey.secret_multiplier

</code></pre>
<p><em>Note: Although it looks like a simple multiplication operation, the  * operator has been overridden in the ECDSA library to perform Elliptic Curve Diffie-Hellman calculation</em></p>
<h2>
<a name="h-3-slice-the-encrypted-message-into-its-component-parts-5" class="anchor" href="https://radixtalk.com#h-3-slice-the-encrypted-message-into-its-component-parts-5"></a>3. Slice the encrypted message into its component parts:</h2>
<pre><code class="lang-python">encrypted_message = "01ff02663a6aaf4d5ec607330b9b74a840bf5c13b0a7357202fa85be56b1326065561657d6ee46d4d84e94ec615b425a472dd8c813bad125335a097d29b64b72319357406b2b04491b4ca1a5a05fe8772b0c05f4633b399914348c5b03af58445d42c2f740f8407e572775a571805e582c6b96ffd4ccca764f2002510abddaab735ee4fb0b18c26d"

# Message Type: 01 (1 byte)
message_type = encrypted_message[0:2]

# Encryption Type: ff (1 byte)
encryption_type = encrypted_message[2:4]

# Ephemeral Public Key: 02663a6aaf4d5ec607330b9b74a840bf5c13b0a7357202fa85be56b13260655616 (33 bytes)
ephemeral_public_key = encrypted_message[4:70]

# Nonce: 57d6ee46d4d84e94ec615b42 (12 bytes)
nonce = encrypted_message[70:94]

# Auth Tag: 5a472dd8c813bad125335a097d29b64b (16 bytes)
auth_tag = encrypted_message[94:126]

# Ciphertext: 72319357406b2b04491b4ca1a5a05fe8772b0c05f4633b399914348c5b03af58445d42c2f740f8407e572775a571805e582c6b96ffd4ccca764f2002510abddaab735ee4fb0b18c26d
ciphertext = encrypted_message[126:]

</code></pre>
<h2>
<a name="h-4-convert-the-ephemeral-public-key-into-a-curve-point-6" class="anchor" href="https://radixtalk.com#h-4-convert-the-ephemeral-public-key-into-a-curve-point-6"></a>4. Convert the Ephemeral Public Key into a Curve Point</h2>
<pre><code class="lang-python"># Convert Ephemeral Public key into a Curve Point
ephemeral_curve = VerifyingKey.from_string(bytearray.fromhex(ephemeral_public_key), curve=ecdsa.SECP256k1, hashfunc=hashlib.sha256)
ephemeral_point = ephemeral_curve.pubkey.point
</code></pre>
<h2>
<a name="h-5-use-elliptic-curve-point-addition-to-combine-the-dh-point-with-the-ephemeral-point-7" class="anchor" href="https://radixtalk.com#h-5-use-elliptic-curve-point-addition-to-combine-the-dh-point-with-the-ephemeral-point-7"></a>5. Use Elliptic Curve Point Addition to combine the DH Point with the Ephemeral Point</h2>
<pre><code class="lang-python"># Elliptic Curve Point Addition
shared_secret_point = dh + ephemeral_point
</code></pre>
<p><em>Note: Although it looks like a simple addition operation, the + operator has been overridden in the ECDSA library to perform Elliptic Curve Point Addition</em></p>
<h2>
<a name="h-6-use-the-x-co-ordinate-of-the-shared-secret-point-as-the-shared-secret-8" class="anchor" href="https://radixtalk.com#h-6-use-the-x-co-ordinate-of-the-shared-secret-point-as-the-shared-secret-8"></a>6. Use the x co-ordinate of the Shared Secret Point as the Shared Secret</h2>
<pre><code class="lang-python">shared_secret_integer = shared_secret_point.x()
shared_secret_hex = hex(shared_secret_integer)[2:]

print("Shared Secret:", shared_secret_hex)

# Shared Secret: 64567aaa53dadd0d9dade89aca0beba4ea00ff987d986f5af421ff2bd636ca9d
</code></pre>
<h2>
<a name="h-7-use-the-scrypt-key-derivation-function-kdf-to-convert-the-shared-secret-into-the-message-decryption-key-9" class="anchor" href="https://radixtalk.com#h-7-use-the-scrypt-key-derivation-function-kdf-to-convert-the-shared-secret-into-the-message-decryption-key-9"></a>7. Use the Scrypt Key Derivation Function (KDF) to convert the shared secret into the message decryption key:</h2>
<pre><code class="lang-python">from Crypto.Protocol.KDF import scrypt

# Create the Scrypt salt from the SHA256 of the nonce
salt = hashlib.sha256(bytearray.fromhex(nonce)).digest()

# Get the Decryption Key
key = scrypt(bytearray.fromhex(shared_secret_hex), salt, 32, 8192, 8 ,1)

print("Decryption Key:", key.hex())

# Decryption Key: 7a294fd759ffdba936f46f5c773c7c8bd3e44064572b926e4e3e0b7291897a30
</code></pre>
<h2>
<a name="h-8-decrypt-the-cipher-text-with-the-decryption-key-using-aes-gcm-10" class="anchor" href="https://radixtalk.com#h-8-decrypt-the-cipher-text-with-the-decryption-key-using-aes-gcm-10"></a>8. Decrypt the cipher text with the decryption key using AES-GCM:</h2>
<pre><code class="lang-python">from Crypto.Cipher import AES

decrypt = AES.new(key, AES.MODE_GCM, nonce=bytearray.fromhex(nonce))

# Add the Ephemeral Public Key as Associated Data
decrypt.update(bytearray.fromhex(ephemeral_public_key))

msg = decrypt.decrypt_and_verify(bytearray.fromhex(ciphertext), bytearray.fromhex(auth_tag))

print("Plaintext Message:", msg)

# Plaintext Message: b'Hey Bob, this is Alice, you and I can read this message, but no one else.'
</code></pre>
<h2>
<a name="h-8-the-entire-script-11" class="anchor" href="https://radixtalk.com#h-8-the-entire-script-11"></a>8. The Entire Script:</h2>
<pre><code class="lang-python">import bech32
import ecdsa
import hashlib
from ecdsa.curves import SECP256k1
from ecdsa.keys import SigningKey, VerifyingKey
from Crypto.Protocol.KDF import scrypt
from Crypto.Cipher import AES


encrypted_message = "01ff02663a6aaf4d5ec607330b9b74a840bf5c13b0a7357202fa85be56b1326065561657d6ee46d4d84e94ec615b425a472dd8c813bad125335a097d29b64b72319357406b2b04491b4ca1a5a05fe8772b0c05f4633b399914348c5b03af58445d42c2f740f8407e572775a571805e582c6b96ffd4ccca764f2002510abddaab735ee4fb0b18c26d"
alice_wallet_address = "rdx1qsp8n0nx0muaewav2ksx99wwsu9swq5mlndjmn3gm9vl9q2mzmup0xqm2ylge"
bob_private_key_hex = "0000000000000000000000000000000000000000000000000000000000000002"


_hrp, alice_readdr_5bit = bech32.bech32_decode(alice_wallet_address)
alice_readdr_bytes = bech32.convertbits(alice_readdr_5bit, 5, 8, pad=False)

## Remove the REAddr 04 prefix byte
alice_public_key_bytes = bytes(alice_readdr_bytes)[1:34]

alice_public_key_hex = bytes(alice_public_key_bytes).hex()
print("Alice Public Key:", alice_public_key_hex)

alice_public_key = VerifyingKey.from_string(bytearray.fromhex(alice_public_key_hex), curve=SECP256k1, hashfunc=hashlib.sha256 )

bob_private_key_hex = "0000000000000000000000000000000000000000000000000000000000000002"
bob_private_key = SigningKey.from_string(bytearray.fromhex(bob_private_key_hex), curve=SECP256k1, hashfunc=hashlib.sha256)

# Diffie-Hellman - we need to use lower level functions here so that we get back dh as a curve point
dh = alice_public_key.pubkey.point * bob_private_key.privkey.secret_multiplier

# Message Type: 01 (1 byte)
message_type = encrypted_message[1:2]

# Encryption Type: ff (1 byte)
encryption_type = encrypted_message[2:4]

# Ephemeral Public Key: 02663a6aaf4d5ec607330b9b74a840bf5c13b0a7357202fa85be56b13260655616 (33 bytes)
ephemeral_public_key = encrypted_message[4:70]

# Nonce: 57d6ee46d4d84e94ec615b42 (12 bytes)
nonce = encrypted_message[70:94]

# Auth Tag: 5a472dd8c813bad125335a097d29b64b (16 bytes)
auth_tag = encrypted_message[94:126]

# Ciphertext: 72319357406b2b04491b4ca1a5a05fe8772b0c05f4633b399914348c5b03af58445d42c2f740f8407e572775a571805e582c6b96ffd4ccca764f2002510abddaab735ee4fb0b18c26d
ciphertext = encrypted_message[126:]

# Convert Ephemeral Public key into a Curve Point
ephemeral_curve = VerifyingKey.from_string(bytearray.fromhex(ephemeral_public_key), curve=ecdsa.SECP256k1, hashfunc=hashlib.sha256)
ephemeral_point = ephemeral_curve.pubkey.point

# Elliptic Curve Point Addition
shared_secret_point = dh + ephemeral_point

shared_secret_integer = shared_secret_point.x()
shared_secret_hex = hex(shared_secret_integer)[2:]

print("Shared Secret:", shared_secret_hex)

# Create the Scrypt salt from the SHA256 of the nonce
salt = hashlib.sha256(bytearray.fromhex(nonce)).digest()

# Get the Decryption Key
key = scrypt(bytearray.fromhex(shared_secret_hex), salt, 32, 8192, 8 ,1)

print("Decryption Key:", key.hex())

decrypt = AES.new(key, AES.MODE_GCM, nonce=bytearray.fromhex(nonce))

# Add the Ephemeral Public Key as Associated Data
decrypt.update(bytearray.fromhex(ephemeral_public_key))

msg = decrypt.decrypt_and_verify(bytearray.fromhex(ciphertext), bytearray.fromhex(auth_tag))

print("Plaintext Message:", msg)

</code></pre>
<h2>
<a name="run-this-code-on-replit-12" class="anchor" href="https://radixtalk.com#run-this-code-on-replit-12"></a>Run this code on Replit</h2>
<p><iframe src="https://replit.com/@radixtalk/Decrypt-Transaction-Message?lite=true" width="695" height="521" frameborder="0" seamless="seamless" sandbox="allow-same-origin allow-scripts allow-forms allow-popups allow-popups-to-escape-sandbox allow-presentation"></iframe></p>
<p>Also see: <a href="https://radixtalk.com/t/how-to-encrypt-a-transaction-message-that-can-be-read-by-the-radix-wallet/202" class="inline-onebox">How to encrypt a transaction message that can be read by the Radix Wallet</a></p>
<p>This work by <a href="https://radixpool.com">RadixPool.com</a> is licensed under a <a href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>.</p>
            <p><small>6 posts - 2 participants</small></p>
            <p><a href="https://radixtalk.com/t/how-to-decrypt-an-encrypted-transaction-message-created-by-the-radix-wallet/189">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-to-decrypt-an-encrypted-transaction-message-created-by-the-radix-wallet/189</link>
          <pubDate>Fri, 31 Dec 2021 20:45:24 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-189</guid>
          <source url="https://radixtalk.com/t/how-to-decrypt-an-encrypted-transaction-message-created-by-the-radix-wallet/189.rss">How to decrypt an encrypted transaction message created by the Radix Wallet</source>
        </item>
        <item>
          <title>How to convert a Wallet Address into a Public Key</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <pre><code class="lang-python">import bech32

wallet_address = "rdx1q...."

_hrp, wallet_readdr_5bit = bech32.bech32_decode(wallet_address)
wallet_readdr = bech32.convertbits(wallet_readdr_5bit, 5, 8, pad=False)

# Remove the Radix Engine Address 04 prefix byte
wallet_public_key = wallet_readdr[1:34]

print("Wallet Public Key:", bytes(wallet_public_key).hex())
</code></pre>
<h2>
<a name="run-this-code-on-replit-1" class="anchor" href="https://radixtalk.com#run-this-code-on-replit-1"></a>Run this code on Replit:</h2>
<p><iframe src="https://replit.com/@radixtalk/Wallet-Address-to-Public-Key?lite=true" width="695" height="521" frameborder="0" seamless="seamless" sandbox="allow-same-origin allow-scripts allow-forms allow-popups allow-popups-to-escape-sandbox allow-presentation"></iframe></p>
<p>Also see: <a href="https://radixtalk.com/t/how-to-convert-a-public-key-into-a-wallet-address/193" class="inline-onebox">How to convert a Public Key into a Wallet Address</a></p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://radixtalk.com/t/how-to-convert-a-wallet-address-into-a-public-key/188">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-to-convert-a-wallet-address-into-a-public-key/188</link>
          <pubDate>Fri, 31 Dec 2021 17:33:12 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-188</guid>
          <source url="https://radixtalk.com/t/how-to-convert-a-wallet-address-into-a-public-key/188.rss">How to convert a Wallet Address into a Public Key</source>
        </item>
        <item>
          <title>How do I encode a transaction message so that it displays correctly in the Radix Desktop Wallet?</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>The Radix Desktop Wallet expects messages to be hex encoded strings prefixed with <code>0000</code></p>
<p>For example, to send a message that will display as <code>Hello</code> in the wallet, you could use the following python snippet:</p>
<pre><code class="lang-auto">"0000" + "Hello".encode('utf-8').hex()

# '000048656c6c6f'
</code></pre>
<p>The message field in your transaction would be: <code>000048656c6c6f</code></p>
<h3>
<a name="message-prefix-explained-1" class="anchor" href="https://radixtalk.com#message-prefix-explained-1"></a>Message Prefix explained:</h3>
<p>Message Type (Byte 1):</p>
<ul>
<li>00 → Plaintext/Unencrypted</li>
<li>01 → Encrypted</li>
</ul>
<p>Encryption Scheme (Byte 2):</p>
<ul>
<li>00 → None</li>
<li>FF → DH_ADD_EPH_AESGCM256_SCRYPT_000</li>
</ul>
<p>So a prefix of <code>0000</code> means a plaintext message with no encryption scheme.</p>
            <p><small>7 posts - 2 participants</small></p>
            <p><a href="https://radixtalk.com/t/how-do-i-encode-a-transaction-message-so-that-it-displays-correctly-in-the-radix-desktop-wallet/170">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-do-i-encode-a-transaction-message-so-that-it-displays-correctly-in-the-radix-desktop-wallet/170</link>
          <pubDate>Wed, 29 Dec 2021 19:09:51 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-170</guid>
          <source url="https://radixtalk.com/t/how-do-i-encode-a-transaction-message-so-that-it-displays-correctly-in-the-radix-desktop-wallet/170.rss">How do I encode a transaction message so that it displays correctly in the Radix Desktop Wallet?</source>
        </item>
        <item>
          <title>How do I locally sign a transaction with a private key?</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Developers</category>
          <description><![CDATA[
            <p>When you are <a href="https://docs.radixdlt.com/main/node-api/making-transactions.html">making a transaction using the Node API</a>, you will need to sign the transaction locally using your private key:</p>
<blockquote>
<p>Next, you need to sign the hashOfBlobToSign using the private key of your account (ie. the “from” account). The details of doing so are outside the scope of this doc, but Radix follows a similar signature method as that of Bitcoin, using ECDSA signatures using EC curve “secp256k1”.</p>
<p>The result should be a DER encoded signature in hex that you will use in the following step.</p>
</blockquote>
<p>The following python script will perform the signing operation and produce the correct hex formatted DER encoded signature that you can use to complete the transaction process:</p>
<pre><code class="lang-auto">import ecdsa
import hashlib
from ecdsa.curves import SECP256k1
from ecdsa.util import sigencode_der

private_key_hex = "YOUR_PRIVATE_KEY_AS_A_HEX_STRING"
hash_to_sign = "HASH_OF_BLOB_TO_SIGN"

# Create Private Key object from Private Key Hex String
signing_key = ecdsa.SigningKey.from_string(bytearray.fromhex(private_key_hex), curve=SECP256k1, hashfunc=hashlib.sha256)

# Use the Private Key to Sign the Transaction Hash
signed_hash = signing_key.sign_digest(bytearray.fromhex(hash_to_sign), sigencode=sigencode_der)

print("Signed Hash (DER Format): ", signed_hash.hex())
</code></pre>
<p>Note: You will need to change the <code>YOUR_PRIVATE_KEY_AS_A_HEX_STRING</code> and <code>HASH_OF_BLOB_TO_SIGN</code> variables</p>
            <p><small>11 posts - 6 participants</small></p>
            <p><a href="https://radixtalk.com/t/how-do-i-locally-sign-a-transaction-with-a-private-key/157">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/how-do-i-locally-sign-a-transaction-with-a-private-key/157</link>
          <pubDate>Wed, 29 Dec 2021 13:50:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-157</guid>
          <source url="https://radixtalk.com/t/how-do-i-locally-sign-a-transaction-with-a-private-key/157.rss">How do I locally sign a transaction with a private key?</source>
        </item>
        <item>
          <title>Where can I learn more about Scrypto?</title>
          <dc:creator><![CDATA[Stuart | RadixPool]]></dc:creator>
          <category>Scrypto</category>
          <description><![CDATA[
            <h2>
<a name="community-resources-1" class="anchor" href="https://radixtalk.com#community-resources-1"></a>Community Resources</h2>
<ul>
<li>
<a href="https://discord.gg/Rvkv4xjrWF" class="inline-onebox">Rust &amp; Scrypto Forum</a> on Discord</li>
<li><a href="https://www.scrypto-tutorial.com/getting-started/readme" class="inline-onebox">First Steps to DeFi: A Scrypto Tutorial - First Steps to DeFi: A Scrypto Tutorial</a></li>
<li><a href="https://github.com/cbisaillon/Scrypto-Advent-Calendar" class="inline-onebox">GitHub - cbisaillon/Scrypto-Advent-Calendar: Scrypto Advent Calendar. Learn the new programming langage to build secure DeFi applications quickly.</a></li>
</ul>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://radixtalk.com/t/where-can-i-learn-more-about-scrypto/121">Read full topic</a></p>
          ]]></description>
          <link>https://radixtalk.com/t/where-can-i-learn-more-about-scrypto/121</link>
          <pubDate>Mon, 27 Dec 2021 15:49:12 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">radixtalk.com-topic-121</guid>
          <source url="https://radixtalk.com/t/where-can-i-learn-more-about-scrypto/121.rss">Where can I learn more about Scrypto?</source>
        </item>
  </channel>
</rss>
